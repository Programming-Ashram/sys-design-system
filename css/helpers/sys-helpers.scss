@use "../variables/variable";
@use "sass:map";

// clearfix
@mixin clearfix() {
    &::after {
      display: block;
      clear: both;
      content: "";
    }
 }

 .clearfix{
    @include clearfix();
 }

// SYS COLOR THEMEPALET
$systheme-colors: (
  "accent": variable.$accent-100,
  "olive": variable.$olive-100,
  "alert": variable.$alert-100,
  "error": variable.$error-100,
  "secondary": variable.$secondary-100,
  "dark": variable.$dark-100,
  "light": variable.$light-100,
);

.text-accent, a.text-accent{color: map.get($systheme-colors, "accent");}
.text-olive , a.text-olive{color: map.get($systheme-colors, "olive");}
.text-alert, a.text-alert{color: map.get($systheme-colors, "alert");}
.text-error, a.text-error{color: map.get($systheme-colors, "error");}
.text-secondary, a.text-secondary{color: map.get($systheme-colors, "secondary");}
.text-dark a.text-dark{color: map.get($systheme-colors, "dark");}
.text-light, a.text-light{color: map.get($systheme-colors, "light");}


.bg-accent{
        background-color: map.get($systheme-colors, "accent");
        color: map.get($systheme-colors, "light") !important;
}
.bg-olive{
        background-color: map.get($systheme-colors, "olive");
        color: map.get($systheme-colors, "light") !important;
}
.bg-alert{
        background-color: map.get($systheme-colors, "alert");
        color: map.get($systheme-colors, "light") !important;
       
}
.bg-error{
        background-color: map.get($systheme-colors, "error");
        color: map.get($systheme-colors, "light") !important;
}
.bg-secondary{
        background-color: map.get($systheme-colors, "secondary");
        color: map.get($systheme-colors, "light") !important;
}
.bg-dark{
        background-color: map.get($systheme-colors, "dark");
        color: map.get($systheme-colors, "light") !important;
}
.bg-light{background-color: map.get($systheme-colors, "light");}


// positions 
